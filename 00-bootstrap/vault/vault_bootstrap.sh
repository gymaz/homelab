#!/bin/bash
set -euo pipefail

VAULT_NAMESPACE="vault"
VAULT_POD="vault-0"
VAULT_KEYS_FILE="/tmp/vault-keys.json"

echo "üöÄ Bootstrap Vault complet - Init, Unseal, Auth & Secrets"

# Fonction pour attendre que le pod soit ready
#wait_for_pod() {
#    echo "‚è≥ Attente que le pod vault-0 soit pr√™t..."
#    kubectl wait --for=condition=ready pod/$VAULT_POD -n $VAULT_NAMESPACE --timeout=300s
#}

# Fonction pour v√©rifier si Vault est initialis√©
is_vault_initialized() {
    kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c '
        export VAULT_ADDR="http://vault:8200"
        export VAULT_SKIP_VERIFY=true
        vault status -format=json 2>/dev/null | jq -r ".initialized // false"
    ' 2>/dev/null || echo "false"
}

# Fonction pour v√©rifier si Vault est unsealed
is_vault_unsealed() {
    kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c '
        export VAULT_ADDR="http://vault:8200"
        export VAULT_SKIP_VERIFY=true
        vault status -format=json 2>/dev/null | jq -r ".sealed // true"
    ' 2>/dev/null || echo "true"
}

## Attendre que le pod soit pr√™t
#wait_for_pod

# √âtape 1: V√©rifier l'√©tat de Vault
echo "üîç V√©rification de l'√©tat de Vault..."
INITIALIZED=$(is_vault_initialized)
SEALED=$(is_vault_unsealed)

echo "   - Initialis√©: $INITIALIZED"
echo "   - Scell√©: $SEALED"

# √âtape 2: Initialiser Vault si n√©cessaire
if [ "$INITIALIZED" = "false" ]; then
    echo "üîß Initialisation de Vault..."
    kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c '
        export VAULT_ADDR="http://vault:8200"
        export VAULT_SKIP_VERIFY=true
        vault operator init -format=json
    ' > "$VAULT_KEYS_FILE"
    
    echo "‚úÖ Vault initialis√© - Cl√©s sauvegard√©es dans $VAULT_KEYS_FILE"
    
    # Extraire les informations importantes
    ROOT_TOKEN=$(jq -r '.root_token' "$VAULT_KEYS_FILE")
    UNSEAL_KEY_1=$(jq -r '.unseal_keys_b64[0]' "$VAULT_KEYS_FILE")
    UNSEAL_KEY_2=$(jq -r '.unseal_keys_b64[1]' "$VAULT_KEYS_FILE")
    UNSEAL_KEY_3=$(jq -r '.unseal_keys_b64[2]' "$VAULT_KEYS_FILE")
    UNSEAL_KEY_4=$(jq -r '.unseal_keys_b64[3]' "$VAULT_KEYS_FILE")
    UNSEAL_KEY_5=$(jq -r '.unseal_keys_b64[4]' "$VAULT_KEYS_FILE")

    echo "üîë Token root: $ROOT_TOKEN"
    echo "üóùÔ∏è  Cl√©s d'unsealing sauvegard√©es"
    
else
    echo "‚ÑπÔ∏è  Vault d√©j√† initialis√©"
    
    # Demander les cl√©s si le fichier n'existe pas
    if [ ! -f "$VAULT_KEYS_FILE" ]; then
        echo "‚ùå Fichier de cl√©s non trouv√©. Vous devez fournir les cl√©s manuellement:"
        read -p "Token root: " ROOT_TOKEN
        read -p "Cl√© unseal 1: " UNSEAL_KEY_1  
        read -p "Cl√© unseal 2: " UNSEAL_KEY_2
        read -p "Cl√© unseal 3: " UNSEAL_KEY_3
        read -p "Cl√© unseal 4: " UNSEAL_KEY_4
        read -p "Cl√© unseal 5: " UNSEAL_KEY_5
    else
        ROOT_TOKEN=$(jq -r '.root_token' "$VAULT_KEYS_FILE")
        UNSEAL_KEY_1=$(jq -r '.unseal_keys_b64[0]' "$VAULT_KEYS_FILE")
        UNSEAL_KEY_2=$(jq -r '.unseal_keys_b64[1]' "$VAULT_KEYS_FILE")
        UNSEAL_KEY_3=$(jq -r '.unseal_keys_b64[2]' "$VAULT_KEYS_FILE")
        UNSEAL_KEY_4=$(jq -r '.unseal_keys_b64[3]' "$VAULT_KEYS_FILE")
        UNSEAL_KEY_5=$(jq -r '.unseal_keys_b64[4]' "$VAULT_KEYS_FILE")
    fi
fi

# √âtape 3: Unsealer Vault si n√©cessaire
if [ "$SEALED" = "true" ]; then
    echo "üîì Unsealing de Vault..."
    
    kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
        export VAULT_ADDR=\"http://vault:8200\"
        export VAULT_SKIP_VERIFY=true
        vault operator unseal $UNSEAL_KEY_1
        vault operator unseal $UNSEAL_KEY_2  
        vault operator unseal $UNSEAL_KEY_3
    "
    
    echo "‚úÖ Vault unsealed"
else
    echo "‚ÑπÔ∏è  Vault d√©j√† unsealed"
fi

# √âtape 4: Authentification et activation des secrets engines
echo "üîê Authentification et configuration..."
kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
    export VAULT_ADDR=\"http://vault:8200\"
    export VAULT_SKIP_VERIFY=true
    export VAULT_TOKEN=\"$ROOT_TOKEN\"
    
    echo \"‚úÖ Authentifi√© avec le token root\"
    
    # V√©rifier si le KV engine existe d√©j√†
    if ! vault secrets list | grep -q 'secret/'; then
        echo \"üîß Activation du secrets engine KV...\"
        vault secrets enable -path=secret kv-v2
        echo \"‚úÖ KV secrets engine activ√©\"
    else
        echo \"‚ÑπÔ∏è  KV secrets engine d√©j√† activ√©\"
    fi
    
    # V√©rifier l'√©tat
    vault status
"

# √âtape 5: Cr√©er les secrets
echo "üóùÔ∏è  Cr√©ation des secrets..."

kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
    export VAULT_ADDR=\"http://vault:8200\"
    export VAULT_SKIP_VERIFY=true
    export VAULT_TOKEN=\"$ROOT_TOKEN\"

    generate_password() {
        local length=\${1:-32}
        head -c 48 /dev/urandom | base64 | tr -d \"=+/\" | cut -c1-\$length 2>/dev/null || {
            echo \"\$(date +%s)\$(hostname)\" | sha256sum | head -c \$length
        }
    }

    echo \"üìù Cr√©ation du secret Grafana...\"
    GRAFANA_ADMIN_PASSWORD=\$(generate_password 32)

    if vault kv put secret/grafana admin-password=\"\$GRAFANA_ADMIN_PASSWORD\"; then
        echo \"‚úÖ Secret Grafana cr√©√© avec succ√®s\"
        echo \"üîë Mot de passe Grafana: \$GRAFANA_ADMIN_PASSWORD\"
    else
        echo \"‚ùå √âchec de cr√©ation du secret Grafana\"
        exit 1
    fi

    echo \"üîç V√©rification des secrets:\"
    vault kv list secret/
"

# √âtape 6: Sauvegarder les informations importantes
echo "üíæ Sauvegarde des informations de connexion..."
cat > ../../vault-credentials.txt << EOF
=== INFORMATIONS DE CONNEXION VAULT ===
Date: $(date)

Root Token: $ROOT_TOKEN

Cl√©s d'unsealing:
- Cl√© 1: $UNSEAL_KEY_1  
- Cl√© 2: $UNSEAL_KEY_2
- Cl√© 3: $UNSEAL_KEY_3
- Cl√© 4: $UNSEAL_KEY_4
- Cl√© 5: $UNSEAL_KEY_5

=== COMMANDES UTILES ===
# Port-forward pour acc√®s local:
kubectl port-forward svc/vault 8200:8200 -n vault

# Acc√®s UI:
https://localhost:8200

# Login avec token root dans l'UI
EOF
# √âtape 7: Cr√©er les secrets Kubernetes pour External Secrets
echo "üîê Cr√©ation des secrets Kubernetes pour External Secrets..."

# Cr√©er une policy d√©di√©e pour External Secrets
kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
    export VAULT_ADDR=\"http://vault:8200\"
    export VAULT_SKIP_VERIFY=true
    export VAULT_TOKEN=\"$ROOT_TOKEN\"

    echo \"üìù Cr√©ation de la policy external-secrets...\"
    vault policy write external-secrets - <<EOF
path \"secret/data/*\" {
  capabilities = [\"read\"]
}
path \"secret/metadata/*\" {
  capabilities = [\"list\", \"read\"]
}
EOF

    echo \"üîë Cr√©ation du token pour External Secrets...\"
    vault token create -policy=external-secrets -ttl=8760h -format=json
" > /tmp/external-secrets-token.json

# Extraire le token
EXTERNAL_SECRETS_TOKEN=$(jq -r '.auth.client_token' /tmp/external-secrets-token.json)

# Cr√©er le secret Kubernetes dans le namespace default
echo "üì¶ Cr√©ation du secret vault-token dans le namespace default..."
kubectl create secret generic vault-token \
  --from-literal=token="$EXTERNAL_SECRETS_TOKEN" \
  -n default \
  --dry-run=client -o yaml | kubectl apply -f -

echo "‚úÖ Secret vault-token cr√©√© avec succ√®s"

# Nettoyer
rm -f /tmp/external-secrets-token.json

echo ""
echo "üéØ Configuration External Secrets termin√©e !"
echo "‚úÖ Informations sauvegard√©es dans vault-credentials.txt"

# √âtape 7: Cr√©er les secrets Kubernetes pour External Secrets
echo "üîê Cr√©ation des secrets Kubernetes pour External Secrets..."

# S'assurer d'utiliser le bon token root (le plus r√©cent)
if [ -f "../../vault-credentials.txt" ]; then
    CURRENT_ROOT_TOKEN=$(grep "Root Token:" ../../vault-credentials.txt | awk '{print $3}')
    if [ ! -z "$CURRENT_ROOT_TOKEN" ]; then
        ROOT_TOKEN="$CURRENT_ROOT_TOKEN"
        echo "‚úÖ Token root mis √† jour depuis vault-credentials.txt"
    fi
fi

# Attendre un peu pour s'assurer que Vault est compl√®tement pr√™t
sleep 5

# Cr√©er une policy d√©di√©e pour External Secrets
echo "üìù Cr√©ation de la policy external-secrets..."
kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
    export VAULT_ADDR=\"http://vault:8200\"
    export VAULT_SKIP_VERIFY=true
    export VAULT_TOKEN=\"$ROOT_TOKEN\"
    
    vault policy write external-secrets - <<EOF
path \"secret/data/*\" {
  capabilities = [\"read\"]
}
path \"secret/metadata/*\" {
  capabilities = [\"list\", \"read\"]
}
EOF
"

echo "üîë Cr√©ation du token pour External Secrets..."
# M√©thode alternative : capturer la sortie compl√®te et parser manuellement
TOKEN_CREATION_OUTPUT=$(kubectl exec "$VAULT_POD" -n "$VAULT_NAMESPACE" -- sh -c "
    export VAULT_ADDR=\"http://vault:8200\"
    export VAULT_SKIP_VERIFY=true  
    export VAULT_TOKEN=\"$ROOT_TOKEN\"
    
    # Cr√©er le token sans format JSON pour √©viter les probl√®mes de parsing
    vault token create -policy=external-secrets -ttl=8760h
" 2>&1)

echo "Sortie de la cr√©ation de token:"
echo "$TOKEN_CREATION_OUTPUT"

# Extraire le token de la sortie texte (format standard de Vault)
EXTERNAL_SECRETS_TOKEN=$(echo "$TOKEN_CREATION_OUTPUT" | grep "token " | head -1 | awk '{print $2}')

if [ ! -z "$EXTERNAL_SECRETS_TOKEN" ] && [ "$EXTERNAL_SECRETS_TOKEN" != "" ]; then
    echo "‚úÖ Token extrait: ${EXTERNAL_SECRETS_TOKEN:0:20}..."
    
    echo "üì¶ Cr√©ation du secret vault-token dans le namespace default..."
    kubectl create secret generic vault-token \
      --from-literal=token="$EXTERNAL_SECRETS_TOKEN" \
      -n default \
      --dry-run=client -o yaml | kubectl apply -f -
    
    echo "‚úÖ Secret vault-token cr√©√© avec succ√®s"
    
    # Cr√©er aussi un secret avec le root token pour l'automatisation
    echo "üì¶ Cr√©ation du secret vault-root-credentials pour l'automatisation..."
    kubectl create secret generic vault-root-credentials \
      --from-literal=root-token="$ROOT_TOKEN" \
      -n vault \
      --dry-run=client -o yaml | kubectl apply -f -
    
    echo "‚úÖ Secret vault-root-credentials cr√©√©"
    
else
    echo "‚ùå Impossible d'extraire le token"
    echo "üîÑ Utilisation du root token comme fallback..."
    
    kubectl create secret generic vault-token \
      --from-literal=token="$ROOT_TOKEN" \
      -n default \
      --dry-run=client -o yaml | kubectl apply -f -
    
    echo "‚ö†Ô∏è  Secret vault-token cr√©√© avec le root token (changez cela en production!)"
fi
echo "üéâ Bootstrap Vault termin√© avec succ√®s!"
echo ""
echo "üìã Prochaines √©tapes:"
echo "   1. Consultez vault-credentials.txt pour les informations de connexion"
echo "   2. V√©rifiez que le ClusterSecretStore fonctionne: kubectl describe clustersecretstore vault-backend"
echo "   3. Acc√©dez √† https://localhost:8200"
echo "   4. Connectez-vous avec le token root"
echo ""
echo "üîÑ Pour recr√©er compl√®tement:"
echo "   - Supprimez le namespace: kubectl delete namespace vault"
echo "   - Supprimez les fichiers temporaires: rm -f $VAULT_KEYS_FILE vault-credentials.txt"
echo "   - Relancez ce script"